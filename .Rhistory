# if (new_theta[3]<0)
# {
#   # check alpha
#   if (new_theta[2] < 0 )  stop ("alpha is unstable")
#   # check mu and kappa
#   mu.i = new_theta[1] +Z%*%new_theta[-(1:3)]
#   lx = (max(x) >= mu.i - new_theta[2]/new_theta[3])
#   if (any(lx))  stop ("mu and kappa is unstable")
# }
}
if (method == 'linear' )
{
new_theta = old_theta - alpha*solve(hess)%*%grad
}
old_theta = new_theta
}
return(list(initial = theta0, root = c(old_theta), step = niter))
}
##### theta, beta MLE
lambda = 0.01
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=100)
fit
plot(Z%*%fit$root[-(1:3)])
##### theta, beta MLE
lambda = 0.01
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=1000)
fit
plot(Z%*%fit$root[-(1:3)])
fit$root[1]+Z%*%fit$root[-(1:3)]
plot(x,Y)
Y
plot(Y)
lines(fit$root[1]+Z%*%fit$root[-(1:3)])
lambda = 0.1
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=1000)
fit$
plot(Z%*%fit$root[-(1:3)])
plot(Y)
lines(fit$root[1]+Z%*%fit$root[-(1:3)])
lambda = 1
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=1000)
#fit$
#plot(Z%*%fit$root[-(1:3)])
plot(Y)
lines(fit$root[1]+Z%*%fit$root[-(1:3)])
#
solve(t(Z)%*%Z + lambda*diag(1, ncol(Z)))%*%t(Z)%*%Y
#
Z%*%solve(t(Z)%*%Z + lambda*diag(1, ncol(Z)))%*%t(Z)%*%Y
#
plot(Z%*%solve(t(Z)%*%Z + lambda*diag(1, ncol(Z)))%*%t(Z)%*%Y)
lambda
#
plot(Z%*%solve(t(Z)%*%Z + n*lambda*diag(1, ncol(Z)))%*%t(Z)%*%Y)
#
lambda = 0.1
plot(Z%*%solve(t(Z)%*%Z + n*lambda*diag(1, ncol(Z)))%*%t(Z)%*%Y)
#
lambda = 0.1
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 1
plot(Z%*%solve(t(Z)%*%Z + lambda*Om)%*%t(Z)%*%Y)
#
lambda = 10
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 100
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 1000
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 10
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 1100
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 10
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 1
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
plot(Y)
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
plot(v)
#
lambda = 1
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
plot(v)
#
lambda = 100
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
plot(v)
#
lambda = 1000
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
plot(v)
plot(Y)
#
lambda = 1000
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 100
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 10
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
lambda = 1
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=1000)
plot(Z%*%fit$root[-(1:3)])
##### theta, beta MLE
lambda = 0.1
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=1000)
plot(Z%*%fit$root[-(1:3)])
plot(Y)
s = 2
sim.iter = 100
lambda_vec = seq(0, 1, length  = 50)
#for ( s in c(1:sim.iter) ) {
set.seed(s)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
lambda = 0.1
plot(Y)
lines(fit$root[1]+Z%*%fit$root[-(1:3)])
#
lambda = 10
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 100
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
Y
#
lambda = 1000
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 10000
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
Y
##### theta, beta MLE
lambda = 0.1
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=1000)
plot(Y)
plot(Z%*%fit$root[-(1:3)])
s = 3
#for ( s in c(1:sim.iter) ) {
set.seed(s)
eps = rgev(n,loc=true_theta[1], scale=true_theta[2], shape=true_theta[3])
Y = true_beta + eps
##### theta, beta MLE
lambda = 0.1
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=1000)
plot(Z%*%fit$root[-(1:3)])
plot(Y)
lines(fit$root[1]+Z%*%fit$root[-(1:3)])
#
lambda = 10000
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
#
lambda = 1000
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
Y
#
lambda = 100
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
Y
#
lambda = 10
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
Y
##### theta, beta MLE
lambda = 0.1
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=1000)
#fit$
plot(Z%*%fit$root[-(1:3)])
##### theta, beta MLE
lambda = 0.01
fit <- GEV_regfull(x=Y, z=Z, theta0=true_theta,
beta0=rep(0,p), expr=expr_reg,
method = 'B-spline',
Om = Om, lambda = lambda,
alpha=0.1, maxiter=1000)
#fit$
plot(Z%*%fit$root[-(1:3)])
#
lambda = 10
plot(Z%*%solve(t(Z)%*%Z + n*lambda*Om)%*%t(Z)%*%Y)
Om
library(raster)
getwd()
setwd("~")
getwd()
fn <- "srtm_62_04/srtm_62_04.tif"
r1 <- raster(fn)
plot(r1)
str(r1)
r1@data@values[1]
r1@data@values
r1@data@band
r1@crs@projargs
names(r1)
slot(r1)
slots(r1)
slot(r1)
r1@z
r1@extent
str(r1@extent)
attr(r1)
str(fn)
r1 <- raster(fn)
plot(r1)
r1$s
r1$x
str(r1)
r1$z
r1@z
View(z)
rm(list = ls())
library(raster)
setwd("~")
fn <- "srtm_62_04/srtm_62_04.tif"
r1 <- raster(fn)
plot(r1)
str(r1)
inMemory((r1))
values(r1)[1:10]
values(r1)[1:1000]
dim(r1)
values(r1)[1:100,1:100]
values(r1)[1:100,1:100,1]
res(r1)
880/150
7942/3
2942/3
2942/3/180
54.4/180
54.4/180*1
54.4/180*3
294/180
4000/250
setwd("C:/Users/Jeon/Documents/GitHub/TrendClustering")
source('./library/fusedQR.r')
#setwd('C:\\Users\\uos_stat\\Dropbox\\A Grouping trends\\grouping pursuit (med)\\prog\\data')
library(lpSolve)
install.packages("lpSolve")
library(lpSolve)
library(evd)
library(quantreg)
# simulation Setting
sce = 2
nj = 30
p = 30
k = 1
iter = 200
beta.list = vector(mode='list', length = iter)
rbeta.list.L2.n = rbeta.list.L1.n =vector(mode='list', length = iter)
set.seed(1105+k)
source('/library/simulation.r')
source('./library/simulation.r')
# conv.data and adh.mat are obtained by simulation.r
beta.vec1 = beta.vec2 = c()
i = 1
for (i in 1:p)
{
y = preci[i,-1]
x = 1:nj
tmp.data = data.frame(y = y, x = x)
beta.vec1[i] = lm(y~.,data= tmp.data)$coefficients[2]
beta.vec2[i] = rq.fit(cbind(1,x), y)$coef[2]
}
rbeta.list.L2.n[[k]] = beta.vec1
rbeta.list.L1.n[[k]] = beta.vec2
# Simulation 1
rm(list=ls()) ; gc()
setwd("C:/Users/Jeon/Documents/GitHub/TrendClustering")
source('./library/fusedQR.r')
#setwd('C:\\Users\\uos_stat\\Dropbox\\A Grouping trends\\grouping pursuit (med)\\prog\\data')
library(lpSolve)
library(evd)
library(quantreg)
# simulation Setting
sce = 2
nj = 30
p = 30
k = 1
iter = 1
beta.list = vector(mode='list', length = iter)
rbeta.list.L2.n = rbeta.list.L1.n =vector(mode='list', length = iter)
for (k in 1:iter)
{
set.seed(1105+k)
source('./library/simulation.r')
# conv.data and adh.mat are obtained by simulation.r
beta.vec1 = beta.vec2 = c()
i = 1
for (i in 1:p)
{
y = preci[i,-1]
x = 1:nj
tmp.data = data.frame(y = y, x = x)
beta.vec1[i] = lm(y~.,data= tmp.data)$coefficients[2]
beta.vec2[i] = rq.fit(cbind(1,x), y)$coef[2]
}
rbeta.list.L2.n[[k]] = beta.vec1
rbeta.list.L1.n[[k]] = beta.vec2
}
iter
k = 1
rbeta.list.L2.d = rbeta.list.L1.d  = vector(mode='list', length = iter)
set.seed(1105+k)
source('./library/simulation.r')
source('./library/simulation.r')
set.seed(1105+k)
source('./library/simulation.r')
# conv.data and adh.mat are obtained by simulation.r
beta.vec1 = beta.vec2  = c()
i=1
conv.data
# Simulation 1
rm(list=ls()) ; gc()
setwd("C:/Users/Jeon/Documents/GitHub/TrendClustering")
source('./library/fusedQR.r')
library(lpSolve)
library(evd)
library(quantreg)
# simulation Setting
sce = 2
nj = 30
p = 30
k = 1
iter = 200
beta.list = vector(mode='list', length = iter)
rbeta.list = vector(mode='list', length = iter)
set.seed(1105+k)
source('./library/simulation.r')
# conv.data and adh.mat are obtained by simulation.r
lambda.vec = seq(300, 100, by = - 10)
beta.mat = NULL
i = 1
cat(k,'th iter:',i,'\n')
lambda = lambda.vec[i]
lambda
fused.QR.fun (conv.data, adj.mat,lambda1=0,lambda2=lambda)
# real data
rm(list=ls()) ; gc()
setwd("C:/Users/Jeon/Documents/GitHub/TrendClustering")
source('./library/fusedQR.r')
library(lpSolve)
library(evd)
library(quantreg)
tmpList = vector(mode ='list', length = 9)
tmpList = vector(mode ='list', length = 9)
for ( i in 1:length(tmpList) )
tmpList[[i]] = read.csv (file = paste('./data/p',i,'.csv',sep = ''), header= T)
tmpList
Sys.getenv()
Sys.getlocale()
Sys.setlocale("korean", "LC_ALL")
?Sys.getlocale
Sys.setlocale("LC_ALL", "korean" )
tmpList = vector(mode ='list', length = 9)
for ( i in 1:length(tmpList) )
tmpList[[i]] = read.csv (file = paste('./data/p',i,'.csv',sep = ''), header= T)
tmpList
tmp1 = tmpList[[9]][,-2]
tmp1
for (i in (length(tmpList)-1):1)
{
tmp2 = tmpList[[i]][,-2]
tmp1 = merge(tmp1,tmp2, all = T)
}
site = read.csv (file = 'ASOS.csv', header= T,stringsAsFactor = F)
site = read.csv (file = './data/ASOS.csv', header= T,stringsAsFactor = F)
tmp1= merge(tmp1,site)
tmp1
preci = as.matrix(tmp1[,1:43]); colnames(preci) = names(tmp1)[1:43]
# 측정단위의 변경
preci[,2:36] = preci[,2:36]/10
conv.data = gen.y(preci, m = 15)
site = tmp1[,-(1:43)]
adj.mat = dist.fun(site)
adj.mat = adj.mat[ adj.mat[,3]<=150 ,-3]
## lasso fit
lambda.vec = seq(50, 1, by = -2)
betaMat = NULL
conv.data
preci
preci
load("./data/preci.rdata")
# real data
rm(list=ls()) ; gc()
setwd("C:/Users/Jeon/Documents/GitHub/TrendClustering")
source('./library/fusedQR.r')
Sys.setlocale("LC_ALL", "korean")
load("./data/preci.rdata")
library(lpSolve)
library(evd)
library(quantreg)
ls()
preci
conv.data = gen.y(preci, m = 15)
preci
class(preci()
class(preci)
head(preci)
conv.data
gen.y
head(preci)
ls()
site
dist.fun
conv.data = gen.y(preci, m = 15)
adj.mat = dist.fun(site)
adj.mat
adj.mat = adj.mat[ adj.mat[,3]<=150 ,-3]
adj.mat
## fit
betaVec = fused.QR.fun (conv.data, adj.mat,lambda1=0,lambda2=lambda)
## fit
betaVec = fused.QR.fun (conv.data, adj.mat,lambda1=0,lambda2= 200)
betaVec
## fit
betaVec = fused.QR.fun (conv.data, adj.mat,lambda1=3,lambda2= 30)
betaVec
# plot
betaVec = round(betaVec,5)
betaVec
unique(betaVec)
u.beta = unique(betaVec)
g.idx = 1:length(u.beta)
j = 1
sel = which(beta.vec == u.beta[g.idx[j]])
sel = which(betaVec == u.beta[g.idx[j]])
sel
y = unlist( conv.data$diffy[sel] )
x = unlist(conv.data$diffx[sel])
fit = rq.fit(x,y)
fit
rbeta.vec = rep(0, length(betaVec))
betaVec = round(betaVec,5)
rbeta.vec = rep(0, length(betaVec))
u.beta = unique(betaVec)
g.idx = 1:length(u.beta)
for ( j in 1:length(g.idx))
{
sel = which(betaVec == u.beta[g.idx[j]])
y = unlist( conv.data$diffy[sel] )
x = unlist(conv.data$diffx[sel])
fit = rq.fit(x,y)
rbeta.vec[sel] =  fit$coefficients
}
rbeta.vec
betaVec
refit.fun = function(conv.data, betaVec)
{
betaVec = round(betaVec,5)
rbeta.vec = rep(0, length(betaVec))
u.beta = unique(betaVec)
g.idx = 1:length(u.beta)
for ( j in 1:length(g.idx))
{
sel = which(betaVec == u.beta[g.idx[j]])
y = unlist( conv.data$diffy[sel] )
x = unlist(conv.data$diffx[sel])
fit = rq.fit(x,y)
rbeta.vec[sel] =  fit$coefficients
}
return(rbeta.vec)
}
# refitting
refit.fun(conv.data, betaVec)
# refitting
rcvbetaVec = refit.fun(conv.data, betaVec)
